{"version":3,"sources":["features/boards/contexts/CoordinateContext.js","helpers.js","features/ships/shipFactory.js","features/ships/shipsSlice.js","features/boards/boardFactory.js","features/boards/boardsInitialState.js","features/boards/boardsReducers.js","features/hitHistory/hitHistorySlice.js","features/players/playersSlice.js","features/boards/boardsThunks.js","features/boards/boardsSelectors.js","features/boards/boardsSlice.js","features/game/gameSlice.js","features/players/PlayerContext.js","features/players/playerHooks.js","features/huntAi/huntAiSlice.js","features/ai/aiSlice.js","features/boards/boardHooks.js","features/boards/components/PreviewableCoordinate.js","features/boards/components/PlacementPlayerCoordinate.js","features/ships/shipHooks.js","features/boards/components/StyledCoordinates.js","features/boards/components/PlacementCoordinate.js","features/boards/components/StartedComputerCoordinate.js","features/boards/components/StartedPlayerCoordinate.js","features/boards/components/StartedCoordinate.js","features/boards/components/EndedCoordinate.js","features/boards/components/Coordinate.js","features/boards/components/Row.js","features/game/gameHooks.js","features/boards/components/InterfaceElement.js","features/boards/components/StartedInterface.js","features/boards/components/PlacementInterface.js","features/boards/components/BoardInterface.js","features/boards/Board.js","features/game/components/BegunGame.js","features/game/components/PhaseMessage.js","features/ai/components/DifficultyButtons.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["Component","arrayWith","size","callback","arr","Array","i","length","toRads","degrees","Math","PI","outOfBounds","coordinate","board","board_length","board_height","x","y","adjacentTargets","coordinates","shuffle","filter","adjacentCoordinates","hit","shipFactory","id","playerId","boardId","anchor","orientation","fill","shipCoordinates","ship","floor","cos","sin","nextRotation","offset","shipIsSunk","every","location","shipsAdapter","createEntityAdapter","shipsSlice","createSlice","name","initialState","getInitialState","reducers","shipCreated","state","action","addOne","payload","shipHit","reducer","index","value","shipsSelectors","selectById","updateOne","changes","slice","prepare","shipsReset","actions","getSelectors","globalizedSelectors","ships","selectShips","selectAll","selectShipById","selectShipIsSunk","selectTotal","createSelector","makeSelectShipsLeftForPlayer","boardFactory","occupied","previewing","preview","previewCoordinates","hitHistoryID","shipsToPlace","Carrier","quantity","Battleship","Cruiser","Submarine","Destroyer","selectedShip","ids","entities","1","2","resetPreview","boardEntity","forEach","tileSet","props","occupyBoard","previewSet","inBoundCoords","setPreview","previewRemoved","orientationUpdated","boardsReset","hitHistorySlice","hitRecorded","info","push","hitHistoryReset","selectHitHistory","hitHistory","selectLastHit","history","selectLastHitByBoardId","hitHistoryId","selectHitHistoryId","current","computer","opponentId","playersSlice","nameChanged","number","turnEnded","Object","entries","playersReset","selectPlayers","values","players","selectPlayerById","selectOpponent","player","shipPlaced","createThunk","dispatch","getState","rejectWithValue","selectIsValidPlacement","attackReceived","a","selectBoardById","opponentShipsLeft","shipId","hitIndex","shipStatus","status","prepareAttackReceived","randomShipsPlaced","selectShipsToBePlaced","nextShip","selectNextShip","randomPlacement","nextShipPlaced","condition","selectPlayerId","shipsRemaining","selectAllShipsLeftToBePlaced","nanoid","phaseAdvanced","availableShipsFor","validPlacements","makeSelectValidPlacements","selectValidPlacements","pick","opponent","selectShipsLeftForPlayer","extraReducers","fulfilled","placeShipOnBoard","availableShips","updateNextSelectedShip","selectBoardEntities","boards","selectBoardEntityById","undefined","entity","selectBoardPreview","map","some","selectOrientation","placements","row","yIndex","_","xIndex","reduce","sum","objectSum","obj","selectHittableCoordinates","flatMap","concat","boardsSlice","gameReset","phases","winner","begun","gameSlice","shift","winnerSet","gameBegun","selectGame","game","selectPhase","selectWinner","selectBegun","PlayerContext","createContext","usePlayer","useContext","usePlayers","useSelector","huntAiTurn","selectAiMode","selectTargetsLeft","aiModeSet","huntAiHunted","huntAiTargeted","randomAiTurn","adjacentTargetsAdded","onHit","target","selectNextTarget","lastCoordinate","targets","targetsAdded","targetHit","hits","selectTargetingHits","setTargetingHits","huntAiSlice","mode","targetingHits","coordinatesEqual","huntAi","selectTargets","b","attack","randomAttackChoice","aiTurn","aiTurns","selectAiTurns","turn","selectStrategy","difficultyChosen","aiSlice","turns","strategy","difficulty","ai","coordinateOptions","useShip","useDispatch","useState","setShip","useEffect","isValidPlacement","placeShip","CoordinateContext","PreviewableCoordinate","className","APIS","states","isPreviewValid","removePreview","onFocus","onMouseEnter","onBlur","onMouseLeave","classNames","coordinate__occupied","coordinate__previewing","withCoordinateContext","onClick","tabIndex","coordinateAPI","shipAPI","previewShip","useShipPreview","Provider","useRemainingShips","useMemo","UndisturbedCoordinate","DamagedShipCoordinate","HitCoordinate","SuccessfulHitCoordinate","sunk","setSunk","useSunk","MissedCoordinate","SunkCoordinate","DefaultCoordinate","OccupiedCoordinate","PlacementCoordinate","StartedComputerCoordinate","useAttack","StartedPlayerCoordinate","StartedCoordinate","EndedCoordinate","Coordinate","Row","ratio","useUpdateWinner","phase","shipsRemainingToBePlaced","useWinner","scroll","scrollToTop","InterfaceElement","children","StartedPrompt","computerSinksPerTurn","StatusMessage","LastCoordinateHitStatus","selectHitHistoryByBoardId","computerTurns","turnLookbehind","statuses","max","Statuses","StartedInterface","PlacementInterface","rotate","nextPreview","key","currentPreview","useKeypress","useRotation","BoardInterface","StyledBoard","styled","div","Board","useRandomPlacement","BegunGame","reset","useReset","scrollToBottom","PlacementPhaseMessage","StartPhaseMessage","EndPhaseMessage","PhaseMessage","DifficultyButton","DifficultyButtons","App","configureStore","playersReducer","boardsReducer","gameReducer","shipsReducer","hitHistoryReducer","aiReducer","huntAiReducer","Boolean","window","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2e0332e.chunk.js","sourcesContent":["import { createContext, useContext } from 'react';\nimport PlayerContext from '../../players/PlayerContext';\nimport { useShip, useShipPreview } from '../boardHooks';\n\nconst CoordinateContext = createContext();\n\nexport const withCoordinateContext = (Component) => ({ coordinateAPI }) => {\n  const player = useContext(PlayerContext);\n\n  const { coordinate } = coordinateAPI;\n  const shipAPI = useShip(player, coordinate);\n  const previewAPI = useShipPreview(shipAPI.ship);\n\n  const APIS = {\n    coordinate: coordinateAPI,\n    ship: shipAPI,\n    preview: previewAPI,\n  };\n\n  return (\n    <CoordinateContext.Provider value={APIS}>\n      <Component />\n    </CoordinateContext.Provider>\n  );\n};\n\nexport default CoordinateContext;\n","import shuffle from 'shuffle-array';\n\nexport const arrayWith = (size, callback = () => null) => {\n  const arr = Array(size);\n\n  for (let i = 0; i < arr.length; i++) {\n    arr[i] = callback(i);\n  }\n\n  return arr;\n};\n\n// returns an array with its value updated at arr[index]\nexport const updateArrayAtIndex = (arr, index, value) => {\n  return [...arr.slice(0, index), value, ...arr.slice(index + 1)];\n};\n\nexport const toRads = (degrees) => {\n  return (Math.PI * degrees) / 180;\n};\n\nexport const outOfBounds = (coordinate, board) => {\n  const board_length = board[0].length;\n  const board_height = board.length;\n\n  const [x, y] = coordinate;\n\n  return x < 0 || x >= board_length || y < 0 || y >= board_height;\n};\n\nexport const randomFromArray = (arr) => {\n  return arr[Math.floor(Math.random() * arr.length)];\n};\n\nexport const adjacentCoordinates = ([x, y], board, callback = () => true) => {\n  const adjacent = [\n    [x + 1, y],\n    [x - 1, y],\n    [x, y + 1],\n    [x, y - 1],\n  ];\n\n  return adjacent.filter((coordinate) => {\n    const [x, y] = coordinate;\n\n    if (outOfBounds(coordinate, board)) {\n      return false;\n    } else {\n      return callback(board[y][x]);\n    }\n  });\n};\n\nexport const adjacentTargets = (coordinates, board) => {\n  return shuffle(adjacentCoordinates(coordinates, board, ({ hit }) => !hit));\n};\n","import { toRads, arrayWith } from '../../helpers';\n\nconst shipFactory = ({\n  id,\n  playerId,\n  boardId,\n  length,\n  anchor = [0, 0],\n  orientation = 0,\n}) => {\n  return {\n    id,\n    playerId,\n    boardId,\n    length,\n    /* \n     The ship is oriented according to the polar coordinate system in degrees.\n     0: ship's stern is facing rightwards\n     90: ship's stern is facing upwards\n     180: ship's stern is facing leftwards\n     270: ship's stern is facing downwards\n    */\n    orientation,\n    // The location of the ship's bow [x, y]\n    anchor,\n    hit: Array(length).fill(false),\n  };\n};\n\nexport default shipFactory;\n\nexport const shipCoordinates = (ship) => {\n  const [x, y] = ship.anchor;\n\n  return arrayWith(ship.length, (i) => [\n    Math.floor(x + i * Math.cos(toRads(ship.orientation)) + 0.5),\n    Math.floor(y + i * Math.sin(toRads(ship.orientation)) + 0.5),\n  ]);\n};\n\nexport const nextRotation = (orientation, offset = 90) => {\n  return (orientation + offset) % 360;\n};\n\nexport const shipIsSunk = (ship) => {\n  return ship.hit.every((location) => location === true);\n};\n","import {\n  createEntityAdapter,\n  createSlice,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { updateArrayAtIndex } from '../../helpers';\nimport shipFactory, { shipCoordinates, shipIsSunk } from './shipFactory';\n\nconst shipsAdapter = createEntityAdapter();\n\nexport const shipsSlice = createSlice({\n  name: 'ships',\n  initialState: shipsAdapter.getInitialState(),\n  reducers: {\n    shipCreated: (state, action) => {\n      shipsAdapter.addOne(state, shipFactory(action.payload));\n    },\n    shipHit: {\n      reducer: (state, action) => {\n        const { id, location } = action.payload;\n\n        const ship = shipsSelectors.selectById(state, id);\n\n        if (location < 0 || location >= ship.length) {\n          return state;\n        }\n\n        shipsAdapter.updateOne(state, {\n          id,\n          changes: {\n            hit: updateArrayAtIndex(ship.hit, location, true),\n          },\n        });\n      },\n      prepare: (id, location) => ({ payload: { id, location } }),\n    },\n    shipsReset: () => shipsAdapter.getInitialState(),\n  },\n});\n\nexport const { shipCreated, shipHit, shipsReset } = shipsSlice.actions;\n\nconst shipsSelectors = shipsAdapter.getSelectors();\n\nconst globalizedSelectors = shipsAdapter.getSelectors((state) => state.ships);\n\nexport const {\n  selectAll: selectShips,\n  selectById: selectShipById,\n  selectTotal: selectShipTotal,\n} = globalizedSelectors;\n\nexport const selectShipIsSunk = createSelector(selectShipById, shipIsSunk);\n\nexport const selectShipCoordinates = createSelector(\n  selectShipById,\n  shipCoordinates\n);\n\nexport const makeSelectShipsLeftForPlayer = (playerId) =>\n  createSelector(selectShips, (ships) => {\n    return ships.filter(\n      (ship) => ship.playerId === playerId && !shipIsSunk(ship)\n    ).length;\n  });\n\nexport default shipsSlice.reducer;\n","import { arrayWith } from '../../helpers';\n\nconst boardFactory = ({ id, playerId, size = 10 }) => {\n  return {\n    id,\n    playerId,\n    state: arrayWith(size, () =>\n      arrayWith(size, () => ({\n        occupied: false,\n        hit: false,\n        previewing: false,\n      }))\n    ),\n    // orientation of the next ship\n    orientation: 0,\n    ships: [],\n    preview: null,\n    previewCoordinates: null,\n    hitHistoryID: id,\n    shipsToPlace: {\n      Carrier: { name: 'Carrier', length: 5, quantity: 1 },\n      Battleship: { name: 'Battleship', length: 4, quantity: 1 },\n      Cruiser: { name: 'Cruiser', length: 3, quantity: 1 },\n      Submarine: { name: 'Submarine', length: 3, quantity: 1 },\n      Destroyer: { name: 'Destroyer', length: 2, quantity: 1 },\n    },\n    selectedShip: 'Carrier',\n  };\n};\n\nexport default boardFactory;\n","import boardFactory from './boardFactory';\n\nconst getInitialState = () => ({\n  ids: [1, 2],\n  entities: {\n    1: boardFactory({ id: 1, playerId: 1, size: 10 }),\n    2: boardFactory({ id: 2, playerId: 2, size: 10 }),\n  },\n});\n\nexport default getInitialState;\n","import { shipCoordinates, nextRotation } from '../ships/shipFactory';\nimport { outOfBounds } from '../../helpers';\nimport getInitialState from './boardsInitialState';\n\n// Private functions\nconst inBoundCoords = (ship, board) => {\n  return shipCoordinates(ship).filter(\n    (coordinate) => !outOfBounds(coordinate, board)\n  );\n};\n\nconst resetPreview = (boardEntity) => {\n  const { previewCoordinates, state: board } = boardEntity;\n\n  previewCoordinates?.forEach(([x, y]) => {\n    board[y][x].previewing = false;\n  });\n};\n\nconst setPreview = (boardEntity) => {\n  const { previewCoordinates, state: board } = boardEntity;\n\n  previewCoordinates?.forEach(([x, y]) => {\n    board[y][x].previewing = true;\n  });\n};\n\nconst occupyBoard = (board, props, [x, y]) => {\n  board[y][x] = { ...board[y][x], ...props, occupied: true };\n};\n\n// Default export\nconst reducer = {\n  tileSet: {\n    reducer: (state, action) => {\n      const { boardId, coordinates, props } = action.payload;\n\n      const board = state.entities[boardId].state;\n\n      occupyBoard(board, props, coordinates);\n    },\n    prepare: (boardId, coordinates, props) => {\n      return {\n        payload: { boardId, coordinates, props },\n      };\n    },\n  },\n  previewSet: (state, action) => {\n    const ship = action.payload;\n    const { boardId } = ship;\n    const boardEntity = state.entities[boardId];\n\n    resetPreview(boardEntity);\n\n    boardEntity.preview = ship;\n    boardEntity.previewCoordinates = inBoundCoords(ship, boardEntity.state);\n\n    setPreview(boardEntity);\n  },\n  previewRemoved: (state, action) => {\n    const id = action.payload;\n    const boardEntity = state.entities[id];\n\n    resetPreview(boardEntity);\n\n    boardEntity.preview = null;\n    boardEntity.previewCoordinates = null;\n  },\n  orientationUpdated: (state, action) => {\n    const id = action.payload;\n    const boardEntity = state.entities[id];\n    const orientation = state.entities[id].orientation;\n\n    boardEntity.orientation = nextRotation(orientation);\n  },\n  boardsReset: getInitialState,\n};\n\nexport default reducer;\n","import { createSlice, createSelector } from '@reduxjs/toolkit';\nimport { selectHitHistoryId } from '../boards/boardsSlice';\n\nconst getInitialState = () => {\n  return {\n    1: { id: 1, boardId: 1, state: [] },\n    2: { id: 2, boardId: 2, state: [] },\n  };\n};\n\nexport const hitHistorySlice = createSlice({\n  name: 'hitHistory',\n  initialState: getInitialState(),\n  reducers: {\n    hitRecorded: {\n      reducer: (state, action) => {\n        const { id, coordinate, info } = action.payload;\n        const history = state[id].state;\n\n        history.push([coordinate, info]);\n      },\n      prepare: (id, coordinate, info) => {\n        return {\n          payload: { id, coordinate, info },\n        };\n      },\n    },\n    hitHistoryReset: getInitialState,\n  },\n});\n\nexport const { hitRecorded, hitHistoryReset } = hitHistorySlice.actions;\n\nexport const selectHitHistory = (state, id) => state.hitHistory[id].state;\n\nexport const selectHitHistoryByBoardId = (state, boardId) => {\n  const hitHistoryId = selectHitHistoryId(state, boardId);\n\n  return selectHitHistory(state, hitHistoryId);\n};\n\nexport const selectLastHit = createSelector(\n  selectHitHistory,\n  (history) => history[history.length - 1]\n);\n\nexport const selectLastHitByBoardId = (state, boardId) => {\n  const hitHistoryId = selectHitHistoryId(state, boardId);\n\n  return selectLastHit(state, hitHistoryId);\n};\n\nexport default hitHistorySlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst getInitialState = () => ({\r\n  current: 1,\r\n  entities: {\r\n    1: {\r\n      id: 1,\r\n      name: 'Player',\r\n      computer: false,\r\n      opponentId: 2,\r\n      boardId: 1,\r\n    },\r\n    2: {\r\n      id: 2,\r\n      name: 'Computer',\r\n      computer: true,\r\n      opponentId: 1,\r\n      boardId: 2,\r\n    },\r\n  },\r\n});\r\n\r\nexport const playersSlice = createSlice({\r\n  name: 'players',\r\n  initialState: getInitialState(),\r\n  reducers: {\r\n    nameChanged: {\r\n      reducer: (state, action) => {\r\n        const { number, name } = action.payload;\r\n        state.entities[number].name = name;\r\n      },\r\n      prepare: (number, name) => {\r\n        return { payload: { number, name } };\r\n      },\r\n    },\r\n    turnEnded: (state) => {\r\n      state.current =\r\n        (state.current % Object.entries(state.entities).length) + 1;\r\n    },\r\n    playersReset: getInitialState,\r\n  },\r\n});\r\n\r\nexport const { turnEnded, nameChanged, playersReset } = playersSlice.actions;\r\n\r\nexport const selectPlayers = (state) => Object.values(state.players.entities);\r\n\r\nexport const selectCurrentPlayer = (state) =>\r\n  state.players.entities[state.players.current];\r\n\r\nexport const selectPlayerById = (state, id) => state.players.entities[id];\r\n\r\nexport const selectOpponent = (state, id) => {\r\n  const player = state.players.entities[id];\r\n  return state.players.entities[player.opponentId];\r\n};\r\n\r\nexport default playersSlice.reducer;\r\n","import { createAsyncThunk as createThunk } from '@reduxjs/toolkit';\nimport {\n  makeSelectValidPlacements,\n  selectPlayerId,\n  selectIsValidPlacement,\n  selectBoardById,\n  selectNextShip,\n  selectShipsToBePlaced,\n  selectAllShipsLeftToBePlaced,\n  selectHitHistoryId,\n} from './boardsSlice';\nimport { selectShipById, selectShipIsSunk } from '../ships/shipsSlice';\nimport { shipCoordinates } from '../ships/shipFactory';\nimport {\n  shipCreated,\n  shipHit,\n  makeSelectShipsLeftForPlayer,\n} from '../ships/shipsSlice';\nimport { hitRecorded } from '../hitHistory/hitHistorySlice';\nimport { selectOpponent } from '../players/playersSlice';\nimport { phaseAdvanced } from '../game/gameSlice';\nimport shuffle from 'shuffle-array';\nimport { nanoid } from '@reduxjs/toolkit';\nimport { outOfBounds } from '../../helpers';\n\nexport const shipPlaced = createThunk(\n  'boards/shipPlacedStatus',\n  (ship, { dispatch, getState, rejectWithValue }) => {\n    if (selectIsValidPlacement(getState(), ship)) {\n      dispatch(shipCreated(ship));\n      return ship;\n    } else {\n      return rejectWithValue('Ship cannot be placed');\n    }\n  }\n);\n\nconst attackReceived = createThunk(\n  'boards/attackRecievedStatus',\n  async (\n    { boardId, coordinate, coordinate: [x, y] },\n    { dispatch, getState, rejectWithValue }\n  ) => {\n    const board = selectBoardById(getState(), boardId);\n    const hitHistoryID = selectHitHistoryId(getState(), boardId);\n    if (opponentShipsLeft(getState(), boardId) === 0) {\n      return rejectWithValue(`All ships have been placed!`);\n    }\n\n    if (outOfBounds(coordinate, board)) {\n      return rejectWithValue(`The coordinates (${x}, ${y}) are out of bounds`);\n    } else if (board[y][x].occupied) {\n      const { shipId, hitIndex } = board[y][x];\n      dispatch(shipHit(shipId, hitIndex));\n      const ship = selectShipById(getState(), shipId);\n      const shipStatus = selectShipIsSunk(getState(), shipId)\n        ? { status: 'sunk', length: ship.length }\n        : { status: 'hit' };\n      dispatch(hitRecorded(hitHistoryID, coordinate, shipStatus));\n    } else {\n      dispatch(hitRecorded(hitHistoryID, coordinate, { status: 'miss' }));\n    }\n    return { boardId, coordinate };\n  }\n);\n\nconst prepareAttackReceived = (boardId, coordinate) =>\n  attackReceived({ boardId, coordinate });\n\nexport { prepareAttackReceived as attackReceived };\n\nexport const randomShipsPlaced = createThunk(\n  'boards/randomShipsPlacedStatus',\n  async ({ boardId }, { dispatch, getState }) => {\n    while (selectShipsToBePlaced(getState(), boardId) > 0) {\n      const nextShip = selectNextShip(getState(), boardId);\n      const [anchor, orientation] = randomPlacement(\n        getState(),\n        boardId,\n        nextShip\n      );\n\n      await dispatch(nextShipPlaced({ boardId, anchor, orientation }));\n    }\n  },\n  {\n    condition: ({ boardId }, { getState }) => {\n      return selectShipsToBePlaced(getState(), boardId) > 0;\n    },\n  }\n);\n\nconst nextShipPlaced = createThunk(\n  'boards/nextShipPlacedStatus',\n  async (\n    { boardId, anchor, orientation },\n    { dispatch, getState, rejectWithValue }\n  ) => {\n    const nextShip = selectNextShip(getState(), boardId);\n    const playerId = selectPlayerId(getState(), boardId);\n\n    if (nextShip.quantity <= 0) {\n      return rejectWithValue('Not enough ships remaining');\n    }\n\n    const shipsRemaining = selectAllShipsLeftToBePlaced(getState()) - 1;\n\n    const ship = {\n      id: nanoid(),\n      length: nextShip.length,\n      anchor,\n      orientation,\n      boardId,\n      playerId,\n    };\n\n    await dispatch(shipPlaced(ship));\n\n    if (shipsRemaining === 0) {\n      dispatch(phaseAdvanced());\n    }\n\n    return [nextShip, boardId];\n  }\n);\n\nconst prepareNextShipPlaced = (boardId, anchor, orientation) =>\n  nextShipPlaced({ boardId, anchor, orientation });\n\nexport { prepareNextShipPlaced as nextShipPlaced };\n\n// Private functions\nconst updateNextSelectedShip = (state, id) => {\n  const { shipsToPlace } = state.entities[id];\n  const availableShips = availableShipsFor(shipsToPlace);\n\n  if (availableShips.length === 0) {\n    state.entities[id].selectedShip = null;\n    state.entities[id].preview = null;\n    state.entities[id].previewCoordinates = null;\n  } else {\n    state.entities[id].selectedShip = availableShips[0].name;\n  }\n};\n\nconst availableShipsFor = (shipsToPlace) => {\n  const shipEntries = Object.values(shipsToPlace);\n\n  return shipEntries.filter(({ quantity }) => {\n    return quantity > 0;\n  });\n};\n\nconst randomPlacement = (state, id, ship) => {\n  const { length } = ship;\n  const selectValidPlacements = makeSelectValidPlacements(id, length);\n  const validPlacements = selectValidPlacements(state);\n  const [anchor, orientation] = shuffle.pick(validPlacements);\n\n  return [anchor, orientation];\n};\n\nconst placeShipOnBoard = (board, ship) => {\n  shipCoordinates(ship).forEach(([x, y], i) => {\n    board[y][x] = {\n      ...board[y][x],\n      shipId: ship.id,\n      hitIndex: i,\n      occupied: true,\n    };\n  });\n};\n\nconst opponentShipsLeft = (state, boardId) => {\n  const playerId = selectPlayerId(state, boardId);\n  const opponent = selectOpponent(state, playerId);\n  const selectShipsLeftForPlayer = makeSelectShipsLeftForPlayer(opponent.id);\n  return selectShipsLeftForPlayer(state);\n};\n\n// Default export\nconst extraReducers = {\n  [shipPlaced.fulfilled]: (state, action) => {\n    const ship = action.payload;\n    const board = state.entities[ship.boardId].state;\n\n    placeShipOnBoard(board, ship);\n    state.entities[ship.boardId].ships.push(ship.id);\n  },\n  [attackReceived.fulfilled]: (state, action) => {\n    const {\n      boardId,\n      coordinate: [x, y],\n    } = action.payload;\n\n    const board = state.entities[boardId].state;\n\n    board[y][x].hit = true;\n  },\n  [nextShipPlaced.fulfilled]: (state, action) => {\n    const [{ name }, id] = action.payload;\n    const { shipsToPlace } = state.entities[id];\n    const ship = shipsToPlace[name];\n\n    if (ship.quantity > 0) {\n      ship.quantity = ship.quantity - 1;\n    }\n\n    if (ship.quantity === 0) {\n      updateNextSelectedShip(state, id);\n    }\n  },\n};\n\nexport default extraReducers;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectShipById } from '../ships/shipsSlice';\nimport { shipCoordinates } from '../ships/shipFactory';\nimport { outOfBounds } from '../../helpers';\n\nconst selectBoardEntities = (state) => state.boards.entities;\n\nconst selectBoardEntityById = (state, id) =>\n  id ? state.boards.entities[id] : undefined;\n\nexport const selectBoardIds = (state) => state.boards.ids;\n\nexport const selectBoardById = createSelector(\n  selectBoardEntityById,\n  (entity) => entity.state\n);\n\nexport const selectAllBoards = createSelector(\n  selectBoardIds,\n  selectBoardEntities,\n  (ids, entities) => ids.map((id) => entities[id])\n);\n\nexport const selectBoardShips = (state, id) => {\n  return state.boards.entities[id].ships.map((shipId) =>\n    selectShipById(state, shipId)\n  );\n};\n\nexport const selectBoardPreview = createSelector(\n  selectBoardEntityById,\n  (boardEntity) => boardEntity?.preview\n);\n\nexport const selectBoardPreviewCoordinates = createSelector(\n  selectBoardEntityById,\n  (boardEntity) => boardEntity?.previewCoordinates\n);\n\nexport const selectIsValidPlacement = (state, ship) => {\n  if (ship === null || ship === undefined) return false;\n\n  const { boardId } = ship;\n  const board = selectBoardById(state, boardId);\n\n  // true if none of the coordinates are out of bounds or occupied\n  return !shipCoordinates(ship).some((coordinate) => {\n    const [x, y] = coordinate;\n    return outOfBounds(coordinate, board) || board[y][x].occupied;\n  });\n};\n\nexport const selectOrientation = createSelector(\n  selectBoardEntityById,\n  (boardEntity) => boardEntity?.orientation\n);\n\nexport const makeSelectValidPlacements = (id, length) => (state) => {\n  const board = selectBoardById(state, id);\n\n  const orientations = [0, 90, 180, 270];\n  const placements = [];\n\n  orientations.forEach((orientation) => {\n    board.forEach((row, yIndex) => {\n      row.forEach((_, xIndex) => {\n        const coordinate = [xIndex, yIndex];\n        const ship = {\n          boardId: id,\n          length,\n          orientation,\n          anchor: coordinate,\n        };\n\n        if (selectIsValidPlacement(state, ship)) {\n          placements.push([coordinate, orientation]);\n        }\n      });\n    });\n  });\n\n  return placements;\n};\n\nexport const selectNextShip = createSelector(\n  selectBoardEntityById,\n  selectOrientation,\n  ({ selectedShip, shipsToPlace }, orientation) => {\n    if (selectedShip === null) {\n      return null;\n    } else {\n      return { ...shipsToPlace[selectedShip], orientation };\n    }\n  }\n);\n\nexport const selectRemainingShips = createSelector(\n  selectBoardEntityById,\n  ({ shipsToPlace }) => {\n    return shipsToPlace;\n  }\n);\n\nexport const selectShipsToBePlaced = createSelector(\n  selectBoardEntityById,\n  ({ shipsToPlace }) => {\n    return Object.values(shipsToPlace).reduce(\n      (sum, { quantity }) => sum + quantity,\n      0\n    );\n  }\n);\n\nconst objectSum = (obj, callback) => {\n  return Object.values(obj).reduce((sum, value) => {\n    return sum + callback(value);\n  }, 0);\n};\n\nexport const selectAllShipsLeftToBePlaced = createSelector(\n  selectBoardEntities,\n  (entities) => {\n    return objectSum(entities, ({ shipsToPlace }) =>\n      objectSum(shipsToPlace, ({ quantity }) => quantity)\n    );\n  }\n);\n\nexport const selectPlayerId = createSelector(\n  selectBoardEntityById,\n  ({ playerId }) => playerId\n);\n\nexport const selectHittableCoordinates = createSelector(\n  selectBoardById,\n  (board) => {\n    return board.flatMap((row, yIndex) => {\n      return row.reduce(\n        (coordinates, { hit }, xIndex) =>\n          !hit ? coordinates.concat([[xIndex, yIndex]]) : coordinates,\n        []\n      );\n    });\n  }\n);\n\nexport const selectCoordinate = (state, boardId, coordinate) => {\n  if (!coordinate) return null;\n\n  const [x, y] = coordinate;\n  const board = selectBoardById(state, boardId);\n\n  return board[y][x];\n};\n\nexport const selectHitHistoryId = createSelector(\n  selectBoardEntityById,\n  ({ hitHistoryID }) => hitHistoryID\n);\n","import { createSlice } from '@reduxjs/toolkit';\nimport reducers from './boardsReducers';\nimport extraReducers from './boardsThunks';\nimport getInitialState from './boardsInitialState';\n\nexport const boardsSlice = createSlice({\n  name: 'boards',\n  initialState: getInitialState(),\n  reducers,\n  extraReducers,\n});\n\nexport const {\n  tileSet,\n  previewSet,\n  previewRemoved,\n  orientationUpdated,\n  boardsReset,\n} = boardsSlice.actions;\n\nexport * from './boardsThunks';\n\nexport * from './boardsSelectors';\n\nexport default boardsSlice.reducer;\n","import {\n  createAsyncThunk as createThunk,\n  createSlice,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { shipsReset } from '../ships/shipsSlice';\nimport { boardsReset } from '../boards/boardsSlice';\nimport { playersReset } from '../players/playersSlice';\nimport { hitHistoryReset } from '../hitHistory/hitHistorySlice';\n\nexport const gameReset = createThunk(\n  'game/gameResetStatus',\n  async (_, { dispatch }) => {\n    dispatch(hitHistoryReset());\n    dispatch(boardsReset());\n    dispatch(playersReset());\n    dispatch(shipsReset());\n  }\n);\n\nconst getInitialState = () => ({\n  phases: ['placement', 'started', 'ended'],\n  winner: null,\n  begun: false,\n});\n\nexport const gameSlice = createSlice({\n  name: 'game',\n  initialState: getInitialState(),\n  reducers: {\n    phaseAdvanced: (state) => {\n      state.phases.shift();\n    },\n    winnerSet: (state, action) => {\n      state.winner = action.payload;\n    },\n    gameBegun: (state) => {\n      state.begun = true;\n    },\n  },\n  extraReducers: {\n    [gameReset.fulfilled]: getInitialState,\n  },\n});\n\nexport const { phaseAdvanced, winnerSet, gameBegun } = gameSlice.actions;\n\nexport const selectGame = (state) => state.game;\n\nexport const selectPhase = createSelector(selectGame, (game) => game.phases[0]);\n\nexport const selectWinner = createSelector(selectGame, (game) => game.winner);\n\nexport const selectBegun = createSelector(selectGame, (game) => game.begun);\n\nexport default gameSlice.reducer;\n","import { createContext } from 'react';\n\nconst PlayerContext = createContext(1);\n\nexport default PlayerContext;\n","import { useContext } from 'react';\nimport { useSelector } from 'react-redux';\nimport PlayerContext from './PlayerContext';\nimport { selectOpponent } from './playersSlice';\n\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};\n\nexport const usePlayers = () => {\n  const player = usePlayer();\n  const opponent = useSelector((state) => selectOpponent(state, player.id));\n\n  return [player, opponent];\n};\n","import {\n  createAsyncThunk as createThunk,\n  createSlice,\n  createSelector,\n} from '@reduxjs/toolkit';\nimport { attackReceived, selectBoardById } from '../boards/boardsSlice';\nimport { adjacentTargets } from '../../helpers';\nimport { selectLastHitByBoardId } from '../hitHistory/hitHistorySlice';\nimport { randomAiTurn } from '../ai/aiSlice';\n\nexport const huntAiTurn = createThunk(\n  'huntAiTurnStatus',\n  async ({ boardId }, { dispatch, getState }) => {\n    if (\n      selectAiMode(getState()) === 'targeting' &&\n      selectTargetsLeft(getState()) === 0\n    ) {\n      dispatch(aiModeSet('hunting'));\n    }\n\n    switch (selectAiMode(getState())) {\n      case 'hunting':\n        dispatch(huntAiHunted({ boardId }));\n        break;\n      case 'targeting':\n        dispatch(huntAiTargeted({ boardId }));\n        break;\n      default:\n        dispatch(huntAiHunted({ boardId }));\n    }\n  }\n);\n\nconst huntAiHunted = createThunk(\n  'huntAiHunted',\n  async ({ boardId }, { dispatch }) => {\n    dispatch(randomAiTurn({ boardId }));\n\n    dispatch(\n      adjacentTargetsAdded({\n        boardId,\n        onHit: () => {\n          dispatch(aiModeSet('targeting'));\n        },\n      })\n    );\n  }\n);\n\nconst huntAiTargeted = createThunk(\n  'huntAiTargeted',\n  async ({ boardId }, { dispatch, getState }) => {\n    const target = selectNextTarget(getState());\n\n    dispatch(attackReceived(boardId, target));\n\n    dispatch(adjacentTargetsAdded({ boardId }));\n\n    return target;\n  }\n);\n\nconst adjacentTargetsAdded = createThunk(\n  'adjacentTargetsAdded',\n  async ({ boardId, onHit = () => {} }, { dispatch, getState }) => {\n    const [lastCoordinate, { status, length }] = selectLastHitByBoardId(\n      getState(),\n      boardId\n    );\n\n    if (status !== 'miss') {\n      onHit();\n\n      const board = selectBoardById(getState(), boardId);\n      const targets = adjacentTargets(lastCoordinate, board);\n\n      dispatch(targetsAdded(targets));\n    }\n\n    switch (status) {\n      case 'hit':\n        dispatch(targetHit());\n        break;\n      case 'sunk':\n        const hits = selectTargetingHits(getState()) - length + 1;\n        if (hits === 0) {\n          dispatch(aiModeSet('hunting'));\n        } else {\n          dispatch(setTargetingHits(selectTargetingHits()));\n        }\n        break;\n      default:\n    }\n  }\n);\n\nconst getInitialState = () => ({\n  mode: 'hunting',\n  targets: [],\n  targetingHits: 0,\n});\n\nexport const huntAiSlice = createSlice({\n  name: 'huntAi',\n  initialState: getInitialState(),\n  reducers: {\n    aiModeSet: (state, action) => {\n      state.mode = action.payload;\n      state.targets = [];\n      state.targetingHits = 0;\n    },\n    targetsAdded: (state, action) => {\n      state.targets.push(...action.payload);\n    },\n    targetHit: (state) => {\n      state.targetingHits++;\n    },\n    setTargetingHits: (state, action) => {\n      state.targetingHits = action.payload;\n    },\n  },\n  extraReducers: {\n    [huntAiTargeted.fulfilled]: (state, action) => {\n      if (state.mode === 'targeting') {\n        state.targets = state.targets.filter((target) => {\n          return !coordinatesEqual(target, action.payload);\n        });\n      }\n    },\n  },\n});\n\nexport const {\n  aiModeSet,\n  targetsAdded,\n  targetHit,\n  setTargetingHits,\n} = huntAiSlice.actions;\n\nexport default huntAiSlice.reducer;\n\nexport const selectAiMode = (state) => state.huntAi.mode;\n\nexport const selectTargets = (state) => state.huntAi.targets;\n\nexport const selectTargetsLeft = createSelector(\n  selectTargets,\n  (targets) => targets.length\n);\n\nexport const selectNextTarget = createSelector(\n  selectTargets,\n  (targets) => targets[targets.length - 1]\n);\n\nconst selectTargetingHits = (state) => state.huntAi.targetingHits;\n\n// private\n\nconst coordinatesEqual = (a, b) => {\n  return a[0] === b[0] && a[1] === b[1];\n};\n","import { createAsyncThunk as createThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  attackReceived,\n  selectHittableCoordinates,\n} from '../boards/boardsSlice';\nimport { gameReset, gameBegun } from '../game/gameSlice';\nimport shuffle from 'shuffle-array';\nimport { huntAiTurn } from '../huntAi/huntAiSlice';\n\nexport const randomAiTurn = createThunk(\n  'randomAiTurnStatus',\n  ({ boardId }, { dispatch, getState }) => {\n    const attack = randomAttackChoice(getState(), boardId);\n    dispatch(attackReceived(boardId, attack));\n  }\n);\n\nexport const aiTurn = createThunk(\n  'aiTurnStatus',\n  async ({ boardId }, { dispatch, getState }) => {\n    const aiTurns = selectAiTurns(getState());\n\n    for (let turn = 0; turn < aiTurns; turn++) {\n      switch (selectStrategy(getState())) {\n        case 'hunt':\n          await dispatch(huntAiTurn({ boardId }));\n          break;\n        case 'random':\n        default:\n          await dispatch(randomAiTurn({ boardId }));\n      }\n    }\n  }\n);\n\nexport const difficultyChosen = createThunk(\n  'difficultyChosenStatus',\n  async (payload, { dispatch }) => {\n    await dispatch(gameReset());\n    dispatch(gameBegun());\n\n    return payload;\n  }\n);\n\nconst getInitialState = () => ({\n  turns: 1,\n  strategy: 'hunt',\n});\n\nexport const aiSlice = createSlice({\n  name: 'ai',\n  initialState: getInitialState(),\n  extraReducers: {\n    [difficultyChosen.fulfilled]: (state, action) => {\n      const { difficulty, strategy } = action.payload;\n\n      state.strategy = strategy;\n\n      switch (difficulty) {\n        case 'easy':\n          state.turns = 1;\n          break;\n        case 'hard':\n          state.turns = 3;\n          break;\n        case 'medium':\n        default:\n          state.turns = 2;\n          break;\n      }\n    },\n  },\n});\n\n// export const { difficultyChosen } = aiSlice.actions;\n\nexport const selectAiTurns = (state) => state.ai.turns;\n\nexport default aiSlice.reducer;\n\nexport const selectStrategy = (state) => state.ai.strategy;\n\n// private\nconst randomAttackChoice = (state, boardId) => {\n  const coordinateOptions = selectHittableCoordinates(state, boardId);\n\n  return shuffle.pick(coordinateOptions);\n};\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from '@reduxjs/toolkit';\nimport useKeypress from 'react-use-keypress';\nimport { selectPhase } from '../game/gameSlice';\nimport {\n  randomShipsPlaced,\n  orientationUpdated,\n  previewSet,\n  nextShipPlaced,\n  previewRemoved,\n  selectPlayerId,\n  selectBoardPreview,\n  selectShipsToBePlaced,\n  selectIsValidPlacement,\n  selectNextShip,\n  attackReceived,\n} from './boardsSlice';\nimport { selectPlayerById } from '../players/playersSlice';\nimport { usePlayers } from '../players/playerHooks';\nimport { nextRotation } from '../ships/shipFactory';\nimport { aiTurn } from '../ai/aiSlice';\n\nconst useRandomPlacement = (player, callback) => {\n  const { boardId } = player;\n  const dispatch = useDispatch();\n  const shipsRemaining = useSelector((state) =>\n    selectShipsToBePlaced(state, boardId)\n  );\n\n  /* eslint-disable */\n  useEffect(() => {\n    if (shipsRemaining > 0 && callback(player)) {\n      dispatch(randomShipsPlaced({ boardId }));\n    }\n  }, [dispatch]);\n  /* eslint-enable */\n};\n\nconst useRotation = (boardId, key = 'r') => {\n  const dispatch = useDispatch();\n  const phase = useSelector(selectPhase);\n  const currentPreview = useSelector((state) =>\n    selectBoardPreview(state, boardId)\n  );\n  const playerId = useSelector((state) => selectPlayerId(state, boardId));\n  const player = useSelector((state) => selectPlayerById(state, playerId));\n\n  let nextPreview;\n  if (currentPreview) {\n    nextPreview = {\n      ...currentPreview,\n      orientation: nextRotation(currentPreview.orientation),\n    };\n  } else {\n    nextPreview = currentPreview;\n  }\n\n  const rotate = () => {\n    if (!player.computer && phase === 'placement') {\n      dispatch(orientationUpdated(1));\n      if (nextPreview) {\n        dispatch(previewSet(nextPreview));\n      }\n    }\n  };\n\n  useKeypress(key, rotate);\n  return rotate;\n};\n\nconst useShip = ({ boardId, id: playerId }, [xIndex, yIndex]) => {\n  const dispatch = useDispatch();\n\n  const nextShip = useSelector((state) => selectNextShip(state, boardId));\n\n  const [ship, setShip] = useState({\n    ...nextShip,\n    id: nanoid(),\n    boardId,\n    playerId,\n    anchor: [xIndex, yIndex],\n  });\n\n  useEffect(() => {\n    if (nextShip) {\n      setShip((state) => ({ ...state, ...nextShip }));\n    } else {\n      setShip(null);\n    }\n  }, [nextShip]);\n\n  const placeShip = () => {\n    if (ship) {\n      dispatch(nextShipPlaced(boardId, ship.anchor, ship.orientation));\n    }\n  };\n\n  const isValidPlacement = useSelector((state) =>\n    selectIsValidPlacement(state, ship)\n  );\n\n  return { ship, isValidPlacement, placeShip };\n};\n\nconst useShipPreview = (ship) => {\n  const dispatch = useDispatch();\n  const boardId = ship?.boardId;\n\n  const previewShip = useSelector((state) =>\n    selectBoardPreview(state, boardId)\n  );\n\n  const isPreviewValid = useSelector((state) =>\n    selectIsValidPlacement(state, previewShip)\n  );\n\n  const setPreview = () => {\n    ship && dispatch(previewSet(ship));\n  };\n\n  const removePreview = () => {\n    ship && dispatch(previewRemoved(boardId));\n  };\n\n  return { isPreviewValid, setPreview, removePreview };\n};\n\nconst useAttack = (coordinate) => {\n  const dispatch = useDispatch();\n  const [player, opponent] = usePlayers();\n\n  return () => {\n    dispatch(attackReceived(player.boardId, coordinate));\n\n    dispatch(aiTurn(opponent));\n  };\n};\n\nexport { useRandomPlacement, useRotation, useShip, useShipPreview, useAttack };\n","import { useContext } from 'react';\nimport classNames from 'classnames';\nimport CoordinateContext from '../contexts/CoordinateContext';\nimport { ImBlocked } from 'react-icons/im';\n\n// A Coordinate that controls the preview state based on mouse movements\n// or toggling focus\nconst PreviewableCoordinate = ({ className, ...props }) => {\n  const APIS = useContext(CoordinateContext);\n  const { states } = APIS.coordinate;\n  const { occupied, previewing } = states;\n  const { isValidPlacement } = APIS.ship;\n  const { isPreviewValid, setPreview, removePreview } = APIS.preview;\n\n  return (\n    <button\n      onFocus={setPreview}\n      onMouseEnter={setPreview}\n      onBlur={removePreview}\n      onMouseLeave={removePreview}\n      className={classNames('coordinate', {\n        coordinate__occupied: occupied,\n        coordinate__previewing: previewing,\n        'coordinate__previewing--invalid': previewing && !isPreviewValid,\n        'coordinate--valid-placement': isValidPlacement,\n      })}\n      {...props}\n    >\n      {previewing && !isPreviewValid && <ImBlocked />}\n    </button>\n  );\n};\n\nexport default PreviewableCoordinate;\n","import { useContext } from 'react';\nimport PreviewableCoordinate from './PreviewableCoordinate';\nimport CoordinateContext, {\n  withCoordinateContext,\n} from '../contexts/CoordinateContext';\n\nconst PlacementPlayerCoordinate = () => {\n  const APIS = useContext(CoordinateContext);\n  const { isValidPlacement, placeShip } = APIS.ship;\n\n  if (isValidPlacement) {\n    return <PreviewableCoordinate onClick={placeShip} />;\n  } else {\n    return <PreviewableCoordinate tabIndex=\"-1\" />;\n  }\n};\n\nexport default withCoordinateContext(PlacementPlayerCoordinate);\n","import { useMemo, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectShipById, makeSelectShipsLeftForPlayer } from './shipsSlice';\nimport { shipIsSunk } from './shipFactory';\n\nexport const useSunk = (shipId) => {\n  const ship = useSelector((state) => selectShipById(state, shipId));\n  const [sunk, setSunk] = useState(false);\n\n  useEffect(() => {\n    if (ship) {\n      setSunk(shipIsSunk(ship));\n    }\n  }, [ship]);\n\n  return sunk;\n};\n\nexport const useRemainingShips = (player) => {\n  const selectShipsLeftForPlayer = useMemo(\n    () => makeSelectShipsLeftForPlayer(player.id),\n    [player]\n  );\n  return useSelector(selectShipsLeftForPlayer);\n};\n","import classNames from 'classnames';\nimport { useSunk } from '../../ships/shipHooks';\nimport { GiCrossMark } from 'react-icons/gi';\nimport { BiWater } from 'react-icons/bi';\nimport { FaSkull } from 'react-icons/fa';\nimport './Coordinate.scss';\n\nexport const UndisturbedCoordinate = (props) => {\n  const { coordinateAPI } = props;\n  const { states } = coordinateAPI;\n  const { occupied } = states;\n\n  if (occupied) {\n    return <OccupiedCoordinate {...props} />;\n  } else {\n    return <DefaultCoordinate {...props} />;\n  }\n};\n\nexport const DamagedShipCoordinate = ({ coordinateAPI, ...props }) => {\n  return (\n    <button\n      className=\"coordinate coordinate__hit coordinate__occupied\"\n      {...props}\n    >\n      <GiCrossMark />\n    </button>\n  );\n};\n\nexport const HitCoordinate = (props) => {\n  const { coordinateAPI } = props;\n  const { states } = coordinateAPI;\n  const { occupied } = states;\n\n  if (occupied) {\n    return <SuccessfulHitCoordinate {...props} />;\n  } else {\n    return <MissedCoordinate {...props} />;\n  }\n};\n\nexport const SuccessfulHitCoordinate = (props) => {\n  const { coordinateAPI } = props;\n  const { states } = coordinateAPI;\n  const { shipId } = states;\n  const sunk = useSunk(shipId);\n\n  if (sunk) {\n    return <SunkCoordinate {...props} />;\n  } else {\n    return <DamagedShipCoordinate {...props} />;\n  }\n};\n\nexport const MissedCoordinate = ({ coordinateAPI, ...props }) => {\n  return (\n    <button className=\"coordinate coordinate__miss\" {...props}>\n      <BiWater />\n    </button>\n  );\n};\n\nexport const SunkCoordinate = ({ coordinateAPI, ...props }) => {\n  return (\n    <button\n      className=\"coordinate coordinate__occupied coordinate__sunk\"\n      {...props}\n    >\n      <FaSkull />\n    </button>\n  );\n};\n\nexport const DefaultCoordinate = ({ coordinateAPI, className, ...props }) => {\n  return <button className={classNames(className, 'coordinate')} {...props} />;\n};\n\nexport const OccupiedCoordinate = ({ coordinateAPI, ...props }) => {\n  return <button className=\"coordinate coordinate__occupied\" {...props} />;\n};\n","import { useContext } from 'react';\nimport PlayerContext from '../../players/PlayerContext';\nimport PlacementPlayerCoordinate from './PlacementPlayerCoordinate';\nimport { DefaultCoordinate } from './StyledCoordinates';\n\nconst PlacementCoordinate = ({ coordinate, states }) => {\n  const player = useContext(PlayerContext);\n\n  if (player.computer) {\n    return <DefaultCoordinate tabIndex=\"-1\" />;\n  } else {\n    return <PlacementPlayerCoordinate coordinateAPI={{ coordinate, states }} />;\n  }\n};\n\nexport default PlacementCoordinate;\n","import { useAttack } from '../boardHooks';\nimport { HitCoordinate, DefaultCoordinate } from './StyledCoordinates';\n\nconst StartedComputerCoordinate = (props) => {\n  const { coordinateAPI } = props;\n  const { states, coordinate } = coordinateAPI;\n  const { hit } = states;\n\n  const attack = useAttack(coordinate);\n\n  if (hit) {\n    return <HitCoordinate tabIndex=\"-1\" {...props} />;\n  } else {\n    return (\n      <DefaultCoordinate\n        className=\"cursor-pointer coordinate__hover\"\n        onClick={attack}\n        {...props}\n      />\n    );\n  }\n};\n\nexport default StartedComputerCoordinate;\n","import { HitCoordinate, UndisturbedCoordinate } from './StyledCoordinates';\n\nconst StartedPlayerCoordinate = (props) => {\n  const { coordinateAPI } = props;\n  const { states } = coordinateAPI;\n  const { hit } = states;\n\n  if (hit) {\n    return <HitCoordinate {...props} />;\n  } else {\n    return <UndisturbedCoordinate {...props} />;\n  }\n};\n\nexport default StartedPlayerCoordinate;\n","import { useContext } from 'react';\nimport PlayerContext from '../../players/PlayerContext';\nimport StartedComputerCoordinate from './StartedComputerCoordinate';\nimport StartedPlayerCoordinate from './StartedPlayerCoordinate';\n\nconst StartedCoordinate = (coordinateAPI) => {\n  const player = useContext(PlayerContext);\n\n  if (player.computer) {\n    return <StartedComputerCoordinate coordinateAPI={coordinateAPI} />;\n  } else {\n    return (\n      <StartedPlayerCoordinate coordinateAPI={coordinateAPI} tabIndex=\"-1\" />\n    );\n  }\n};\n\nexport default StartedCoordinate;\n","import { HitCoordinate, UndisturbedCoordinate } from './StyledCoordinates';\n\nconst EndedCoordinate = ({ coordinate, states, ...props }) => {\n  const coordinateAPI = { coordinate, states };\n  const { hit } = states;\n\n  if (hit) {\n    return <HitCoordinate coordinateAPI={coordinateAPI} {...props} />;\n  } else {\n    return <UndisturbedCoordinate coordinateAPI={coordinateAPI} {...props} />;\n  }\n};\n\nexport default EndedCoordinate;\n","import { useSelector } from 'react-redux';\nimport PlacementCoordinate from './PlacementCoordinate';\nimport StartedCoordinate from './StartedCoordinate';\nimport EndedCoordinate from './EndedCoordinate';\nimport { selectPhase } from '../../game/gameSlice';\nimport './Coordinate.scss';\n\nconst Coordinate = (props) => {\n  const phase = useSelector(selectPhase);\n\n  switch (phase) {\n    case 'placement':\n      return <PlacementCoordinate {...props} />;\n    case 'started':\n      return <StartedCoordinate {...props} />;\n    default:\n      return <EndedCoordinate {...props} />;\n  }\n};\n\nexport default Coordinate;\n","import Coordinate from './Coordinate';\nimport { AspectRatio } from 'react-aspect-ratio';\nimport 'react-aspect-ratio/aspect-ratio.css';\n\nconst Row = ({ row, yIndex }) => {\n  return (\n    <>\n      {row.map((states, xIndex) => (\n        <AspectRatio ratio=\"1\" key={xIndex}>\n          <Coordinate coordinate={[xIndex, yIndex]} states={states} />\n        </AspectRatio>\n      ))}\n    </>\n  );\n};\n\nexport default Row;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectPhase, gameReset, phaseAdvanced, winnerSet } from './gameSlice';\nimport { selectOpponent } from '../players/playersSlice';\nimport { useRemainingShips } from '../ships/shipHooks';\nimport { selectShipsToBePlaced } from '../boards/boardsSlice';\nimport { animateScroll as scroll } from 'react-scroll';\n\nexport const useReset = () => {\n  const dispatch = useDispatch();\n\n  return () => {\n    dispatch(gameReset());\n  };\n};\n\nexport const useWinner = (player) => {\n  const phase = useSelector(selectPhase);\n  const shipsRemaining = useRemainingShips(player);\n  const shipsRemainingToBePlaced = useSelector((state) =>\n    selectShipsToBePlaced(state, player.boardId)\n  );\n  const opponent = useSelector((state) => selectOpponent(state, player.id));\n\n  const winnerDetermined =\n    phase === 'started' &&\n    shipsRemaining === 0 &&\n    shipsRemainingToBePlaced === 0;\n\n  if (winnerDetermined) {\n    return opponent;\n  } else {\n    return null;\n  }\n};\n\nexport const useUpdateWinner = (player) => {\n  const dispatch = useDispatch();\n  const winner = useWinner(player);\n\n  useEffect(() => {\n    if (winner) {\n      dispatch(phaseAdvanced());\n      dispatch(winnerSet(winner));\n      scroll.scrollToTop();\n    }\n  }, [dispatch, winner]);\n};\n","import classNames from 'classnames';\n\nconst InterfaceElement = ({ children, className, ...props }) => {\n  return (\n    <span className={classNames('tag', className)} {...props}>\n      {children}\n    </span>\n  );\n};\n\nexport default InterfaceElement;\n","import { useRemainingShips } from '../../ships/shipHooks';\nimport { usePlayer, usePlayers } from '../../players/playerHooks';\nimport { useSelector } from 'react-redux';\nimport { selectHitHistoryByBoardId } from '../../hitHistory/hitHistorySlice';\nimport { selectAiTurns } from '../../ai/aiSlice';\nimport InterfaceElement from './InterfaceElement';\nimport classNames from 'classnames';\n\nconst StartedInterface = () => {\n  const player = usePlayer();\n  const shipsRemaining = useRemainingShips(player);\n\n  return (\n    <div className=\"box mx-5 interface tags is-justify-content-center is-flex-direction-column\">\n      <StartedPrompt className=\"title is-5\" />\n      <InterfaceElement className=\"is-medium is-info is-outlined\">\n        Ships Remaining: {shipsRemaining}\n      </InterfaceElement>\n      <div className=\"tags\">\n        <LastCoordinateHitStatus />\n      </div>\n    </div>\n  );\n};\n\nconst StartedPrompt = ({ className }) => {\n  const opponent = usePlayers()[1];\n  const computerSinksPerTurn = useSelector(selectAiTurns);\n\n  if (opponent.computer) {\n    return (\n      <h3 className={className}>\n        The computer sinks {computerSinksPerTurn}{' '}\n        {computerSinksPerTurn === 1 ? 'ship' : 'ships'} per turn\n      </h3>\n    );\n  } else {\n    return (\n      <h3 className={classNames(className, 'has-text-success')}>\n        Click on this board to sink their ships!\n      </h3>\n    );\n  }\n};\n\nconst StatusMessage = ({ status }) => {\n  const player = usePlayer();\n\n  switch (status) {\n    case 'miss':\n      return (\n        <InterfaceElement className=\"is-danger\">\n          {player.name} took a shot and missed.\n        </InterfaceElement>\n      );\n    case 'sunk':\n      return (\n        <InterfaceElement className=\"is-success\">\n          {player.name} sunk a ship!\n        </InterfaceElement>\n      );\n    case 'hit':\n      return (\n        <InterfaceElement className=\"is-info\">\n          {player.name} hit a ship!\n        </InterfaceElement>\n      );\n    default:\n      return <InterfaceElement>Unknown Status!</InterfaceElement>;\n  }\n};\n\nconst LastCoordinateHitStatus = () => {\n  const [player, opponent] = usePlayers();\n  const { boardId } = opponent;\n  const hitHistory = useSelector((state) =>\n    selectHitHistoryByBoardId(state, boardId)\n  );\n\n  const computerTurns = useSelector(selectAiTurns);\n\n  const turnLookbehind = player.computer ? computerTurns : 1;\n\n  const statuses = hitHistory\n    .slice(Math.max(0, hitHistory.length - turnLookbehind))\n    .map(([_, { status }]) => status);\n\n  if (statuses.length > 0) {\n    return <Statuses statuses={statuses} />;\n  } else {\n    return <InterfaceElement>No Moves Made yet.</InterfaceElement>;\n  }\n};\n\nconst Statuses = ({ statuses }) => {\n  return statuses.map((status, i) => {\n    return <StatusMessage status={status} key={i} />;\n  });\n};\n\nexport default StartedInterface;\n","import { usePlayer } from '../../players/playerHooks';\nimport { useSelector } from 'react-redux';\nimport { selectOrientation, selectShipsToBePlaced } from '../boardsSlice';\nimport { useRotation } from '../boardHooks';\nimport InterfaceElement from './InterfaceElement';\n\nconst PlacementInterface = () => {\n  const player = usePlayer();\n  const rotate = useRotation(player.boardId, 't');\n  const orientation = useSelector((state) =>\n    selectOrientation(state, player.boardId)\n  );\n  const shipsRemaining = useSelector((state) =>\n    selectShipsToBePlaced(state, player.boardId)\n  );\n\n  if (player.computer) {\n    return (\n      <div className=\"box mx-3\">\n        <h2 className=\"title is-5 mb-3\">Waiting...</h2>\n        <div className=\"tags is-justify-content-center\">\n          <InterfaceElement className=\"is-warning is-medium is-light\">\n            Waiting for you to place your pieces...\n          </InterfaceElement>\n        </div>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"box mx-3\">\n        <h2 className=\"title is-5 has-text-success mb-3 has-white-space-nowrap\">\n          Place your pieces\n        </h2>\n        <div className=\"tags is-justify-content-center is-align-items-baseline is-flex-wrap-nowrap\">\n          <button\n            className=\"tag button is-medium is-outlined is-info\"\n            onClick={rotate}\n          >\n            Rotate: <span className=\"orientation\">{orientation}&deg;</span>\n          </button>\n          <InterfaceElement className=\"is-info is-medium is-light\">\n            {shipsRemaining} {shipsRemaining === 1 ? 'ship' : 'ships'} left to\n            place\n          </InterfaceElement>\n        </div>\n      </div>\n    );\n  }\n};\n\nexport default PlacementInterface;\n","import { useSelector } from 'react-redux';\nimport { selectPhase } from '../../game/gameSlice';\nimport StartedInterface from './StartedInterface';\nimport PlacementInterface from './PlacementInterface';\n\nconst BoardInterface = () => {\n  const phase = useSelector(selectPhase);\n\n  switch (phase) {\n    case 'placement':\n      return <PlacementInterface />;\n    case 'started':\n      return <StartedInterface />;\n    default:\n      return null;\n  }\n};\n\nexport default BoardInterface;\n","import { useSelector } from 'react-redux';\nimport { selectBoardById } from './boardsSlice';\nimport Row from './components/Row';\nimport styled from 'styled-components';\nimport PlayerContext from '../players/PlayerContext';\nimport { useRandomPlacement } from './boardHooks';\nimport { useUpdateWinner } from '../game/gameHooks';\nimport BoardInterface from './components/BoardInterface';\nimport './Board.css';\n\nconst StyledBoard = styled.div`\n  box-sizing: border-box;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  width: 75%;\n  margin: 0 auto;\n  padding: 1em;\n  grid-gap: 2px;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nconst Board = ({ player }) => {\n  const board = useSelector((state) => selectBoardById(state, player.boardId));\n\n  useRandomPlacement(player, ({ computer }) => computer);\n\n  useUpdateWinner(player);\n\n  return (\n    <PlayerContext.Provider value={player}>\n      <div className=\"board\">\n        <h2 className=\"title is-3 my-3 is-primary\">{player.name}</h2>\n        <BoardInterface />\n        <StyledBoard tabIndex={player.computer ? '-1' : '0'}>\n          {board.map((row, yIndex) => (\n            <Row row={row} yIndex={yIndex} key={yIndex} />\n          ))}\n        </StyledBoard>\n      </div>\n    </PlayerContext.Provider>\n  );\n};\n\nexport default Board;\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectPlayers } from '../../players/playersSlice';\nimport Board from '../../boards/Board';\nimport { useReset } from '../gameHooks';\nimport { selectPhase } from '../gameSlice';\nimport { animateScroll as scroll } from 'react-scroll';\n\nconst BegunGame = () => {\n  const players = useSelector(selectPlayers);\n  const reset = useReset();\n  const phase = useSelector(selectPhase);\n\n  useEffect(() => {\n    if (phase !== 'ended') {\n      scroll.scrollToBottom();\n    }\n  }, [phase]);\n\n  return (\n    <div>\n      <button className=\"button is-primary is-outlined\" onClick={reset}>\n        Reset\n      </button>\n      <div className=\"boards\">\n        {players.map((player) => (\n          <Board player={player} key={player.id} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default BegunGame;\n","import { useSelector } from 'react-redux';\nimport { selectWinner, selectPhase } from '../gameSlice';\nimport { AiFillRobot } from 'react-icons/ai';\nimport { GiCaptainHatProfile } from 'react-icons/gi';\n\nconst PhaseMessage = () => {\n  const phase = useSelector(selectPhase);\n\n  switch (phase) {\n    case 'placement':\n      return <PlacementPhaseMessage />;\n    case 'started':\n      return <StartPhaseMessage />;\n    case 'ended':\n      return <EndPhaseMessage />;\n    default:\n      return <p>Current phase: {phase}</p>;\n  }\n};\n\nconst PlacementPhaseMessage = () => {\n  return (\n    <p>\n      To place your ship, hover over your board and click on a coordinate.\n      <br />\n      Press t to rotate your ship or click on the rotate button.\n      <br />\n      Press tab on desktop to cycle over any valid placements.\n    </p>\n  );\n};\n\nconst StartPhaseMessage = () => {\n  return (\n    <p>\n      Start sinking ships by clicking on coordinates on your opponent's board.\n      <br />\n      Press tab on desktop to cycle over each valid coordinate.\n      <br />\n      Sink all 5 ships before your opponent to win!\n    </p>\n  );\n};\n\nconst EndPhaseMessage = () => {\n  const winner = useSelector(selectWinner);\n\n  if (winner.computer) {\n    return (\n      <div className=\"winner-container\">\n        <AiFillRobot className=\"winner-icon has-text-info\" />\n        <h3 className=\"title is-3 mb-3\">The computer won.</h3>\n        <p>Try again?</p>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"winner-container\">\n        <GiCaptainHatProfile className=\"winner-icon has-text-info\" />\n        <h3 className=\"title is-3 mb-3\">You win!</h3>\n        <p>Try again?</p>\n      </div>\n    );\n  }\n};\n\nexport default PhaseMessage;\n","import { useDispatch } from 'react-redux';\nimport { difficultyChosen } from '../aiSlice';\nimport classNames from 'classnames';\n\nconst DifficultyButtons = () => {\n  return (\n    <div>\n      <div>\n        <DifficultyButton\n          difficulty=\"easy\"\n          strategy=\"random\"\n          className=\"is-info\"\n        >\n          Random Easy\n        </DifficultyButton>\n        <DifficultyButton\n          difficulty=\"medium\"\n          strategy=\"random\"\n          className=\"is-success\"\n        >\n          Random Medium\n        </DifficultyButton>\n        <DifficultyButton\n          difficulty=\"hard\"\n          strategy=\"random\"\n          className=\"is-warning\"\n        >\n          Random Hard\n        </DifficultyButton>\n      </div>\n      <div>\n        <DifficultyButton\n          difficulty=\"easy\"\n          strategy=\"hunt\"\n          className=\"is-success\"\n        >\n          Medium\n        </DifficultyButton>\n        <DifficultyButton\n          difficulty=\"medium\"\n          strategy=\"hunt\"\n          className=\"is-warning\"\n        >\n          Hard\n        </DifficultyButton>\n        <DifficultyButton\n          difficulty=\"hard\"\n          strategy=\"hunt\"\n          className=\"is-danger\"\n        >\n          Very Hard\n        </DifficultyButton>\n      </div>\n    </div>\n  );\n};\n\nconst DifficultyButton = ({ difficulty, strategy, className, children }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <button\n      className={classNames('button', className, 'm-1')}\n      onClick={() => {\n        dispatch(difficultyChosen({ difficulty, strategy }));\n      }}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport default DifficultyButtons;\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectBegun } from './features/game/gameSlice';\r\nimport BegunGame from './features/game/components/BegunGame';\r\nimport PhaseMessage from './features/game/components/PhaseMessage';\r\nimport DifficultyButtons from './features/ai/components/DifficultyButtons';\r\nimport 'bulma/css/bulma.css';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const gameBegun = useSelector(selectBegun);\r\n  return (\r\n    <div className=\"App mb-5\">\r\n      <h1 className=\"title is-1 my-5\">Battleship</h1>\r\n      <div className=\"container is-fluid\">\r\n        <div className=\"box phase-message\">\r\n          {gameBegun ? <PhaseMessage /> : <p>Choose a difficulty to begin!</p>}\r\n        </div>\r\n        {!gameBegun ? <DifficultyButtons /> : <BegunGame />}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport playersReducer from '../features/players/playersSlice';\r\nimport boardsReducer from '../features/boards/boardsSlice';\r\nimport shipsReducer from '../features/ships/shipsSlice';\r\nimport gameReducer from '../features/game/gameSlice';\r\nimport hitHistoryReducer from '../features/hitHistory/hitHistorySlice';\r\nimport aiReducer from '../features/ai/aiSlice';\r\nimport huntAiReducer from '../features/huntAi/huntAiSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    players: playersReducer,\r\n    boards: boardsReducer,\r\n    game: gameReducer,\r\n    ships: shipsReducer,\r\n    hitHistory: hitHistoryReducer,\r\n    ai: aiReducer,\r\n    huntAi: huntAiReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}